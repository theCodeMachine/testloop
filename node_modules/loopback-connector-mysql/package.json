{
  "name": "loopback-connector-mysql",
  "version": "1.1.1",
  "description": "MySQL connector for loopback-datasource-juggler",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "mysql": "~2.0.0-rc2",
    "async": "~0.2.9"
  },
  "devDependencies": {
    "loopback-datasource-juggler": "1.x.x",
    "should": "~1.3.0",
    "mocha": "~1.14.0",
    "rc": "~0.3.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-connector-mysql.git"
  },
  "license": "MIT",
  "readme": "## loopback-connector-mysql\n\n`loopback-connector-mysql` is the MySQL connector module for [loopback-datasource-juggler](http://docs.strongloop.com/loopback-datasource-juggler/).\n\n## Installation\n\n````sh\nnpm install loopback-connector-mysql --save\n````\n\n## Usage\n\nTo use it you need `loopback-datasource-juggler`.\n\n1. Setup dependencies in `package.json`:\n\n    ```json\n    {\n      ...\n      \"dependencies\": {\n        \"loopback-datasource-juggler\": \"latest\",\n        \"loopback-connector-mysql\": \"latest\"\n      },\n      ...\n    }\n    ```\n\n2. Use:\n\n    ```javascript\n        var DataSource = require('loopback-datasource-juggler').DataSource;\n        var dataSource = new DataSource('mysql', {\n            host: 'localhost',\n            port: 3306,\n            database: 'mydb',\n            username: 'myuser',\n            password: 'mypass'\n        });\n    ```\n    You can optionally pass a few additional parameters supported by [`node-mysql`](https://github.com/felixge/node-mysql),\n    most particularly `password` and `collation`. `Collation` currently defaults\n    to `utf8_general_ci`. The `collation` value will also be used to derive the\n    connection charset.\n\n\n## Data type mappings\n\n`loopback-connector-mysql` uses the following rules to map between JSON types and MySQL data types.\n\n### JSON to MySQL types\n\n- String/JSON: VARCHAR\n- Text: TEXT\n- Number: INT\n- Date: DATETIME\n- BOOLEAN: TINYINT(1)\n- Point/GeoPoint: POINT\n- Enum: ENUM\n\n### MySQL to JSON types\n\n- CHAR: String\n- CHAR(1): Boolean\n- VARCHAR/TINYTEXT/MEDIUMTEXT/LONGTEXT/TEXT/ENUM/SET: String\n- TINYBLOB/MEDIUMBLOB/LONGBLOB/BLOB/BINARY/VARBINARY/BIT: Binary\n- TINYINT/SMALLINT/INT/MEDIUMINT/YEAR/FLOAT/DOUBLE/NUMERIC/DECIMAL: Number\n- DATE/TIMESTAMP/DATETIME: Date\n\n## Using the `dataType` field/column option with MySQL\n\n`loopback-connector-mysql` allows mapping of LoopBack model properties to MYSQL columns using the 'mysql' property of the\n property definition. For example,\n\n    \"locationId\":{\n        \"type\":\"String\",\n        \"required\":true,\n        \"length\":20,\n        \"mysql\":\n        {\n            \"columnName\":\"LOCATION_ID\",\n            \"dataType\":\"VARCHAR2\",\n            \"dataLength\":20,\n            \"nullable\":\"N\"\n        }\n    }\n\n`loopback-connector-mysql` also supports using the `dataType` column/property attribute to specify what MySQL column\ntype is used for many loopback-datasource-juggler types.\n\nThe following type-dataType combinations are supported:\n- Number\n  - integer\n    - tinyint\n    - smallint\n    - mediumint\n    - int\n    - bigint\n     \n     Use the `limit` option to alter the display width.\n\n     Example:\n      `{ count : { type: Number, dataType: 'smallInt' }}`\n\n  - floating point types\n    - float\n    - double\n     \n     Use the `precision` and `scale` options to specify custom precision. Default is (16,8).\n\n     Example:\n      `{ average : { type: Number, dataType: 'float', precision: 20, scale: 4 }}`\n\n  - fixed-point exact value types\n    - decimal\n    - numeric\n\n     Use the `precision` and `scale` options to specify custom precision. Default is (9,2).\n     \n     These aren't likely to function as true fixed-point.\n     \n     Example:\n      `{ stdDev : { type: Number, dataType: 'decimal', precision: 12, scale: 8 }}`\n\n- String / DataSource.Text / DataSource.JSON\n  - varchar\n  - char\n  - text\n  - mediumtext\n  - tinytext\n  - longtext\n  \n  Example:\n   `{ userName : { type: String, dataType: 'char', limit: 24 }}`\n\n  Example:\n   `{ biography : { type: String, dataType: 'longtext' }}`\n\n- Date\n  - datetime\n  - timestamp\n  \n  Example:\n   `{ startTime : { type: Date, dataType: 'timestamp' }}`\n\n* Enum\n  Enums are special.\n  Create an Enum using Enum factory:\n\n```javascript\n    var MOOD = dataSource.EnumFactory('glad', 'sad', 'mad');\n    MOOD.SAD;    // 'sad'\n    MOOD(2);     // 'sad'\n    MOOD('SAD'); // 'sad'\n    MOOD('sad'); // 'sad'\n```\n  \n  - `{ mood: { type: MOOD }}`\n  - `{ choice: { type: dataSource.EnumFactory('yes', 'no', 'maybe'), null: false }}`\n\n\n## Discovering Models\n\nMySQL data sources allow you to discover model definition information from existing mysql databases. See the following APIs:\n\n - [dataSource.discoverModelDefinitions([owner], fn)](https://github.com/strongloop/loopback#datasourcediscovermodeldefinitionsusername-fn)\n - [dataSource.discoverSchema([owner], name, fn)](https://github.com/strongloop/loopback#datasourcediscoverschemaowner-name-fn)\n\n### Asynchronous APIs for discovery\n\n* MySQL.prototype.discoverModelDefinitions = function (options, cb)\n  - options:\n    - all: {Boolean} To include tables/views from all schemas/owners\n    - owner/schema: {String} The schema/owner name\n    - views: {Boolean} To include views\n  - cb:\n    - Get a list of table/view names, for example:\n\n        {type: 'table', name: 'INVENTORY', owner: 'STRONGLOOP' }\n        {type: 'table', name: 'LOCATION', owner: 'STRONGLOOP' }\n        {type: 'view', name: 'INVENTORY_VIEW', owner: 'STRONGLOOP' }\n\n\n* MySQL.prototype.discoverModelProperties = function (table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of model property definitions, for example:\n\n          { owner: 'STRONGLOOP',\n            tableName: 'PRODUCT',\n            columnName: 'ID',\n            dataType: 'VARCHAR2',\n            dataLength: 20,\n            nullable: 'N',\n            type: 'String' }\n          { owner: 'STRONGLOOP',\n            tableName: 'PRODUCT',\n            columnName: 'NAME',\n            dataType: 'VARCHAR2',\n            dataLength: 64,\n            nullable: 'Y',\n            type: 'String' }\n\n\n* MySQL.prototype.discoverPrimaryKeys= function(table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of primary key definitions, for example:\n\n        { owner: 'STRONGLOOP',\n          tableName: 'INVENTORY',\n          columnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkName: 'ID_PK' }\n        { owner: 'STRONGLOOP',\n          tableName: 'INVENTORY',\n          columnName: 'LOCATION_ID',\n          keySeq: 2,\n          pkName: 'ID_PK' }\n\n* MySQL.prototype.discoverForeignKeys= function(table, options, cb)\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of foreign key definitions, for example:\n\n        { fkOwner: 'STRONGLOOP',\n          fkName: 'PRODUCT_FK',\n          fkTableName: 'INVENTORY',\n          fkColumnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkOwner: 'STRONGLOOP',\n          pkName: 'PRODUCT_PK',\n          pkTableName: 'PRODUCT',\n          pkColumnName: 'ID' }\n\n\n* MySQL.prototype.discoverExportedForeignKeys= function(table, options, cb)\n\n  - table: {String} The name of a table or view\n  - options:\n    - owner/schema: {String} The schema/owner name\n  - cb:\n    - Get a list of foreign key definitions that reference the primary key of the given table, for example:\n\n        { fkName: 'PRODUCT_FK',\n          fkOwner: 'STRONGLOOP',\n          fkTableName: 'INVENTORY',\n          fkColumnName: 'PRODUCT_ID',\n          keySeq: 1,\n          pkName: 'PRODUCT_PK',\n          pkOwner: 'STRONGLOOP',\n          pkTableName: 'PRODUCT',\n          pkColumnName: 'ID' }\n\n### Discover/build/try the models\n\n#### Build a LDL schema by discovery\n\nData sources backed by the MySQL connector can discover LDL models from the database using the `discoverSchema` API. For\nexample,\n\n    dataSource.discoverSchema('INVENTORY', {owner: 'STRONGLOOP'}, function (err, schema) {\n        ...\n    }\n\nHere is the sample result. Please note there are 'mysql' properties in addition to the regular LDL model options and\nproperties. The 'mysql' objects contain the MySQL specific mappings.\n\n    {\n      \"name\":\"Inventory\",\n      \"options\":{\n        \"idInjection\":false,\n        \"mysql\":{\n          \"schema\":\"STRONGLOOP\",\n          \"table\":\"INVENTORY\"\n        }\n      },\n      \"properties\":{\n        \"productId\":{\n          \"type\":\"String\",\n          \"required\":false,\n          \"length\":60,\n          \"precision\":null,\n          \"scale\":null,\n          \"id\":1,\n          \"mysql\":{\n            \"columnName\":\"PRODUCT_ID\",\n            \"dataType\":\"varchar\",\n            \"dataLength\":60,\n            \"dataPrecision\":null,\n            \"dataScale\":null,\n            \"nullable\":\"NO\"\n          }\n        },\n        \"locationId\":{\n          \"type\":\"String\",\n          \"required\":false,\n          \"length\":60,\n          \"precision\":null,\n          \"scale\":null,\n          \"id\":2,\n          \"mysql\":{\n            \"columnName\":\"LOCATION_ID\",\n            \"dataType\":\"varchar\",\n            \"dataLength\":60,\n            \"dataPrecision\":null,\n            \"dataScale\":null,\n            \"nullable\":\"NO\"\n          }\n        },\n        \"available\":{\n          \"type\":\"Number\",\n          \"required\":false,\n          \"length\":null,\n          \"precision\":10,\n          \"scale\":0,\n          \"mysql\":{\n            \"columnName\":\"AVAILABLE\",\n            \"dataType\":\"int\",\n            \"dataLength\":null,\n            \"dataPrecision\":10,\n            \"dataScale\":0,\n            \"nullable\":\"YES\"\n          }\n        },\n        \"total\":{\n          \"type\":\"Number\",\n          \"required\":false,\n          \"length\":null,\n          \"precision\":10,\n          \"scale\":0,\n          \"mysql\":{\n            \"columnName\":\"TOTAL\",\n            \"dataType\":\"int\",\n            \"dataLength\":null,\n            \"dataPrecision\":10,\n            \"dataScale\":0,\n            \"nullable\":\"YES\"\n          }\n        }\n      }\n    }\n\nWe can also discover and build model classes in one shot. The following example uses `discoverAndBuildModels` to discover,\nbuild and try the models:\n\n    dataSource.discoverAndBuildModels('INVENTORY', { owner: 'STRONGLOOP', visited: {}, associations: true},\n         function (err, models) {\n            // Show records from the models\n            for(var m in models) {\n                models[m].all(show);\n            };\n\n            // Find one record for inventory\n            models.Inventory.findOne({}, function(err, inv) {\n                console.log(\"\\nInventory: \", inv);\n                // Follow the foreign key to navigate to the product\n                inv.product(function(err, prod) {\n                    console.log(\"\\nProduct: \", prod);\n                    console.log(\"\\n ------------- \");\n                });\n        });\n    }\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-mysql/issues"
  },
  "_id": "loopback-connector-mysql@1.1.1",
  "_from": "loopback-connector-mysql@"
}
