if (global.nodefly) return global.nodefly;

var config = global.nodeflyConfig = require('./config');

var fs      = require('fs');
var util    = require('util');
var path    = require('path');
var events  = require('events');
var os      = require('os');
var semver  = require('semver');

var proxy   = require('./proxy');
var sender  = require('./sender');
var counts  = require('./counts');
var info    = require('./info');
var metrics = require('./metrics');
var transport = require('./transport');
var loop    = require('./loop');
var errors  = require('./errors');

// Profilers
var cpuProf = require('./profilers/cpu');
var memProf = require('./profilers/memory');

var tiers = require('./tiers');

var package = require('../package.json');

/**
 * Cascading config loader
 *
 * Search order:
 *   arguments
 *   process.env
 *   ./strongloop.json
 *   ./package.json
 *   ~/strongloop.json
 *
 * @param   {string} [key]      [API Key]
 * @param   {string} [appName]  [Name to identify app with in dashboard]
 * @returns {object || boolean} [Returns config data, or false if none found]
 */

function ensureConfig (key, appName) {
  var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE
    , cwd = process.cwd()
    , env = process.env
    , nfjson
    , pkgjson
    , userjson;

  // Load configs from nodefly.json and package.json
  try { nfjson = require(cwd + '/strongloop.json'); } catch (e) { nfjson = {}; }
  try { pkgjson = require(cwd + '/package.json'); } catch (e) { pkgjson = {}; }
  try { userjson = require(home + '/strongloop.json'); } catch (e) { userjson = {}; }

  var config = {
    key: key || env.SL_KEY || env.STRONGLOOP_KEY || env.NODEFLY_APPLICATION_KEY || nfjson.userKey || pkgjson.strongAgentKey || userjson.key

    , appName: appName || env.SL_APP_NAME || nfjson.appName || pkgjson.name || userjson.appName
  };

  // Only return config object if we found valid properties.
  if (config.key && config.appName) {
    return config;
  }

  return false;
}

var Nodefly = function()
{
  this.sessionId = null;
  this.debug = true;
  var self = this;
  this.cpuinfo = require('./cpuinfo');

  events.EventEmitter.call(this);
};

util.inherits(Nodefly, events.EventEmitter);

exports = module.exports = global.nodefly = new Nodefly();

Nodefly.prototype.profile = function (key, appName, options) {
  var self = this;

  if (typeof options === 'undefined') {
    options = {};
  }

  if (!process.hrtime) {
    console.log("Node doesn't support process.hrtime(). Nodefly performance metrics will not be available");
    return;
  }

  var config = ensureConfig(key, appName);
  if ( ! config) {
    console.warn('StrongOps not configured to monitor. Please refer to http://docs.strongloop.com/strong-agent for usage.');
    return;
  }

  this.key = config.key;

  if (config.appName instanceof Array) {
    this.appName  = config.appName.shift();
    this.hostname = config.appName.join(':');
  } else {
    this.appName  = config.appName;
    this.hostname = os.hostname();
  }


  this.initialized = true;
  console.log('strong-agent profiling');

  proxy.init();
  sender.init();
  counts.init();
  info.init();
  metrics.init();
  tiers.init();
  loop.init();
  errors.init();

  this.transport = transport.init({
    agent: this,
    agentVersion: package.version,
    port: options.port,
    host: options.host
  });

  this.prepareProbes();
  this.prepareProfilers();
  this.prepareClusterControls();
};

Nodefly.prototype.stop = function() {
  // stop all the things
  this.transport.disconnect();
};

Nodefly.prototype.prepareProbes = function () {
  var probes = {},
    wrapping_probes = {};
  var probe_files = fs.readdirSync(path.dirname(require.resolve('./nodefly')) + '/probes'),
    wrapper_files = fs.readdirSync(path.dirname(require.resolve('./nodefly')) + '/wrapping_probes');

  probe_files.forEach(function (file) {
    var m = file.match(/^(.*)+\.js$/);
    if (m && m.length == 2) probes[m[1]] = true;
  });

  wrapper_files.forEach(function (file) {
    var m = file.match(/^(.*)+\.js$/);
    if (m && m.length == 2) wrapping_probes[m[1]] = true;
  })

  // Monkey-wat?
  var original_require = module.__proto__.require;
  module.__proto__.require = function(name) {
    var args = Array.prototype.slice.call(arguments),
      target_module = original_require.apply(this, args);

    if (args.length == 1 && !target_module.__required__) {
      if (wrapping_probes[name]) {
        target_module.__required__ = true;
        target_module = require('./wrapping_probes/' + name)(target_module);
      } else if (probes[name]) {
        target_module.__required__ = true;
        require('./probes/' + name)(target_module);
      }
    }

    return target_module;
  }
};

Nodefly.prototype.prepareProfilers = function () {
  var self = this;
  memProf.init();

  // // Allow instance profiling events to be triggered from server
  this.transport.on('memory:start', function (rowid) {
    console.log('starting memory profiler', rowid);
    memProf.start();

    self.transport.once('memory:stop', function (rowid) {
      console.log('stopping memory profiler', rowid);
      memProf.stop();
    });
  });

  // Allow cpu profiling events to be triggered from server
  this.transport.on('cpu:start', function (rowid) {
    console.log('starting cpu profiler', rowid);
    cpuProf.start();

    self.transport.once('cpu:stop', function () {
      console.log('stopping cpu profiler', rowid);
      cpuProf.stop(function (data) {
        console.log('sending cpu profiler result', rowid);
        self.transport.send('profileRun', rowid, data);
      });
    });
  });
};

Nodefly.prototype.prepareClusterControls = function () {
  var self = this;
  var control;
  var clusterInfo = {};

  clusterInfo.enabled = false;

  var pathToCluster = process.env.SL_CLUSTER_PATH || '../../strong-cluster-control';

  try {
    control = require(pathToCluster);
  } catch (e) {
    // If we don't have strong-cluster-control loaded, that just means we don't
    // support those features.
  }

  if (control) {
    var version = require(pathToCluster + '/package.json').version;
    if (semver.gte(version, '0.2.0')) {
      console.log('Cluster controls loaded (%s)', version);

      clusterInfo = control.loadOptions();
      // clusterInfo.clustered is a string.
      clusterInfo.enabled = !!clusterInfo.clustered;

      if (clusterInfo.isMaster) {
        setInterval(updateClusterStatus, 5000);
        self.transport.on('cluster:resize', resizeCluster);
        self.transport.on('cluster:restart-all', restartCluster);
        self.transport.on('cluster:terminate', terminateWorker);
        self.transport.on('cluster:shutdown', shutdownWorker);
      }
    }
    else {
      console.log('Please update to strong-cluster-control >= 0.2.0 \
        for StrongOps features');
    }
  } else {
    console.log('Cluster controls unavailable.');
  }

  sendClusterStatus();

  return;

  function updateClusterStatus() {
    if (!control || !clusterInfo.isMaster) {
      return;
    }
    var status = control.status();
    clusterInfo.size = status.workers.length;
    clusterInfo.workers = status.workers;
    clusterInfo.cpus = control.CPUS;
    sendClusterStatus();
  }

  function sendClusterStatus() {
    self.transport.send('cluster:status', clusterInfo);
  }

  function resizeCluster(size) {
    if (!control || !clusterInfo.isMaster) return;
    control.setSize(size);
    updateClusterStatus();
  }

  function restartCluster() {
    if (!control || !clusterInfo.isMaster) return;
    console.log('responding to cluster:restart-all');
    control.restart();
    updateClusterStatus();
  }

  function shutdownWorker(id) {
    if (!control || !clusterInfo.isMaster) return;
    console.log('shutting down worker #%d', id);
    control.shutdown(id);
    updateClusterStatus();
  }

  function terminateWorker(id) {
    if (!control || !clusterInfo.isMaster) return;
    console.log('terminating worker #%d', id);
    control.terminate(id);
    updateClusterStatus();
  }
};

Nodefly.prototype.metric = function (scope, name, value, unit, op, persist) {
  if(!this.initialized) return;
  metrics.add(scope, name, value, unit, op, persist);
};


Nodefly.prototype.log = function (msg) {
  if (this.debug && msg) console.log('nodefly:', msg);
};


Nodefly.prototype.error = function (e) {
  if (this.debug && e) console.error('nodefly error:', e, e.stack);
};


Nodefly.prototype.dump = function (obj) {
  if (this.debug) console.log(util.inspect(obj, false, 10, true));
};


Nodefly.prototype.message = function (msg) {
  util.log("\033[1;31mNodefly:\033[0m " + msg);
};


Nodefly.prototype.millis = function() { return 0; }
